syntax = "proto3";
package osmosis.bridge.v1beta1;

import "gogoproto/gogo.proto";
import "amino/amino.proto";
import "cosmos/base/v1beta1/coin.proto";
import "osmosis/bridge/v1beta1/asset.proto";
import "osmosis/bridge/v1beta1/params.proto";

option go_package = "github.com/osmosis-labs/osmosis/v23/x/bridge/types";

// Msg defines the tokefactory module's gRPC message service.
service Msg {
  // InboundTransfer is used for inbound transfers (<other_chain> -> OSMO).
  rpc InboundTransfer(MsgInboundTransfer) returns (MsgInboundTransferResponse);

  // OutboundTransfer is used for outbound transfers (OSMO -> <other_chain>).
  rpc OutboundTransfer(MsgOutboundTransfer) returns (MsgOutboundTransferResponse);

  // UpdateParams is used for updating module params.
  rpc UpdateParams(MsgUpdateParams) returns (MsgUpdateParamsResponse);

  // EnableBridge enables bridging with the specified chain.
  rpc EnableBridge(MsgEnableBridge) returns (MsgEnableBridgeResponse);

  // DisableBridge disables bridging with the specified chain.
  rpc DisableBridge(MsgDisableBridge) returns (MsgDisableBridgeResponse);
}

// MsgInboundTransfer defines the message structure for the InboundTransfer gRPC
// service method. It allows a sender to perform an inbound cross-chain transfer,
// i.e., to transfer their tokens from the source chain to Osmosis and get
// the equivalent amount of the corresponding token (specified in subdenom)
// on Osmosis in return. The tokens are minted through the x/tokenfactory module
// to the destination address.
message MsgInboundTransfer {
  option (amino.name) = "osmosis/bridge/inbound-transfer";

  // Sender is a sender's address
  string sender = 1 [ (gogoproto.moretags) = "yaml:\"sender\"" ];
  // Destination is a destination Osmosis address
  string destination = 2 [ (gogoproto.moretags) = "yaml:\"destination\"" ];
  // Asset contains a source chain and a target denom
  Asset asset = 3 [
    (gogoproto.moretags) = "yaml:\"asset\"",
    (gogoproto.nullable) = false
  ];
  // Amount of coins to transfer, may be decimal
  cosmos.base.v1beta1.DecCoin amount = 4 [
    (gogoproto.moretags) = "yaml:\"amount\"",
    (gogoproto.nullable) = false
  ];
}

message MsgInboundTransferResponse {}

// MsgOutboundTransfer defines the message structure for the OutboundTransfer gRPC
// service method. It allows a sender to perform an outbound cross-chain transfer,
// i.e., to transfer their tokens from Osmosis to the destination chain.
// The tokens are burned through the x/tokenfactory module from the sender's address.
message MsgOutboundTransfer {
  option (amino.name) = "osmosis/bridge/outbound-transfer";

  // Sender is a sender's Osmosis address
  string sender = 1 [ (gogoproto.moretags) = "yaml:\"sender\"" ];
  // Destination is a destination address
  string destination = 2 [ (gogoproto.moretags) = "yaml:\"destination\"" ];
  // Asset contains a target chain and a source denom
  Asset asset = 3 [
    (gogoproto.moretags) = "yaml:\"asset\"",
    (gogoproto.nullable) = false
  ];
  // Amount of coins to transfer
  cosmos.base.v1beta1.Coin amount = 4 [
    (gogoproto.moretags) = "yaml:\"amount\"",
    (gogoproto.nullable) = false
  ];
}

message MsgOutboundTransferResponse {}

// MsgUpdateParams allows to update module params.
message MsgUpdateParams {
  option (amino.name) = "osmosis/bridge/update-params";

  string sender = 1 [ (gogoproto.moretags) = "yaml:\"sender\"" ];
  Params params = 2 [
    (gogoproto.moretags) = "yaml:\"params\"",
    (gogoproto.nullable) = false
  ];
}

message MsgUpdateParamsResponse {}

// MsgEnableBridge enables bridging between the specified chain
// and its Osmosis representation.
message MsgEnableBridge {
  option (amino.name) = "osmosis/bridge/enable-bridge";

  string sender = 1 [ (gogoproto.moretags) = "yaml:\"sender\"" ];
  Asset asset = 2 [
    (gogoproto.moretags) = "yaml:\"asset\"",
    (gogoproto.nullable) = false
  ];
}

message MsgEnableBridgeResponse {}

// MsgEnableBridge disables bridging between the specified chain
// and its Osmosis representation.
message MsgDisableBridge {
  option (amino.name) = "osmosis/bridge/enable-bridge";

  string sender = 1 [ (gogoproto.moretags) = "yaml:\"sender\"" ];
  Asset asset = 2 [
    (gogoproto.moretags) = "yaml:\"asset\"",
    (gogoproto.nullable) = false
  ];
}

message MsgDisableBridgeResponse {}